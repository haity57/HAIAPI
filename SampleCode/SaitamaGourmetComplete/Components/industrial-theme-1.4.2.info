{"Name":"Industrial Theme","Id":2651,"Alias":"industrial-theme","Description":"To style your app with this modern industrial theme, call\n`IndustrialTheme.Apply` from your AppDelegate\u0027s `FinishedLaunching` method:\n\n```csharp\nusing Xamarin.Themes;\n...\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n  IndustrialTheme.Apply ();\n  ...\n}\n```\n\n*Some component screenshots assembled with [PlaceIt](http://placeit.breezi.com/).*\n","Version":"1.4.2","Summary":"A theme so sharp that you should wear gloves.","QuickStart":"## Applying the Theme\n\nTo style your app with this modern theme, call\n`IndustrialTheme.Apply` from your AppDelegate\u0027s `FinishedLaunching` method:\n\n```csharp\nusing Xamarin.Themes;\n...\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n  IndustrialTheme.Apply ();\n  ...\n}\n```\n\nYou can also selectively apply the theme to specific views. To apply the theme\nto views of a specific class, call `Apply` with the `Appearance` object for the\nview class you\u0027d like themed:\n\n```csharp\nIndustrialTheme.Apply (UIProgressView.Appearance);\n```\n\nTo apply the theme to specific view classes only when they are contained within\nother specific view classes, use `AppearanceWhenContainedIn`. In the following\nexample, we apply `IndustrialTheme` to `UIProgressView` only when\n`UIProgressView` is a child of `UINavigationBar`. \n\n```csharp\nIndustrialTheme.Apply (UIProgressView.AppearanceWhenContainedIn (typeof (UINavigationBar)));\n```\n\nFinally, to apply the theme only to a specific view instance:\n\n```csharp\nUIProgressView progressView;\n...\n\nIndustrialTheme.Apply (progressView);\n```\n\n\n```csharp\nUITableView tableView;\n...\n\nIndustrialTheme.Apply (tableView);\n```\n\nWhen applying a theme to a TableView, you still need to apply the theme to the cells.\n\n```csharp\npublic override UITableViewCell GetCell (UITableView tableView, Foundation.NSIndexPath indexPath)\n{\n  UITableViewCell cell;\n\t...\n\tIndustrialTheme.Apply (cell);\n\treturn cell;\n}\n```\n\nApplying a theme to specific view instances is especially useful for `UIButton`,\n`UILabel`, and `UIView` instances, since they are not themed automatically when\ncalling the parameterless version of `Apply`.\n\n## Options\n\nThe theme can be customized using a string argument passed to the `Apply`\nmethod. In this example, we use the `\"confirm\"` option to apply a special\nconfirmation button style to a `UIButton`:\n\n```csharp\nIndustrialTheme.Apply (button, \"confirm\");\n```\n\nThis theme supports the following options:\n\n* `UIButton`\n  - `\"confirm\"`\n  - `\"cancel\"`\n  - `\"aluminum\"`\n  - `\"landscape\"`\n","Hash":"218f07e3b66121b4a41d534a182c3b96","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}