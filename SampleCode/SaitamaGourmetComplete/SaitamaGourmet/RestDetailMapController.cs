using Google.Maps; using Foundation; using System; using System.Collections.Generic; using CoreGraphics; using CoreLocation; using UIKit;   namespace SaitamaGourmet { 	public partial class RestDetailMapController : UIViewController 	{ 		MapView mapView; 		UISegmentedControl mapTypes; 		public RestDetailMapController(IntPtr handle) : base(handle) 		{ 		}  		public Restaurants targetRestData { get; set; }  		public void SetDetailItem(Restaurants newTargetRestaurant) 		{ 			if (newTargetRestaurant != null) 			{ 				targetRestData = newTargetRestaurant; 			} 		}  		public override void LoadView() 		{ 			base.LoadView(); 		}  		public override void ViewDidLoad() 		{  			targetRestData = ((RestDetailTabViewController)(this.ParentViewController)).targetRestData; 			base.ViewDidLoad(); 			CameraPosition camera = CameraPosition.FromCamera(latitude: targetRestData.latitude,
															  longitude: targetRestData.longitude, 													 zoom: 15); 			mapView = MapView.FromCamera(CGRect.Empty, camera); 			mapView.MyLocationEnabled = true; 			mapView.MapType = MapViewType.Normal; 			View = mapView; 			int typesWidth = 260, typesHeight = 30, distanceFromBottom = 100; 			mapTypes = new UISegmentedControl(new CGRect(55, View.Bounds.Height - distanceFromBottom, typesWidth, typesHeight)); 			mapTypes.InsertSegment("Road", 0, false); 			mapTypes.InsertSegment("Satellite", 1, false); 			mapTypes.InsertSegment("Hybrid", 2, false); 			mapTypes.SelectedSegment = 0; // Road is the default 			mapTypes.AutoresizingMask = UIViewAutoresizing.FlexibleTopMargin; 			mapTypes.ValueChanged += (s, e) => 			{ 				switch (mapTypes.SelectedSegment) 				{ 					case 0: 						mapView.MapType = MapViewType.Normal; 						break; 					case 1: 						mapView.MapType = MapViewType.Satellite; 						break; 					case 2: 						mapView.MapType = MapViewType.Hybrid; 						break; 				} 			};  			View.AddSubview(mapTypes);
			MakeMarker( targetRestData.name, targetRestData.latitude,targetRestData.longitude, targetRestData.address, mapView);
		}  		public Marker MakeMarker(string title, double latitude, double longitude, string address, MapView mv) 		{ 			Marker marker = new Marker(); 			marker.Title = title; 			marker.Snippet = address; 			marker.Position = new CLLocationCoordinate2D(latitude, longitude); 			marker.Map = mv; 			return marker; 		} 	} } 