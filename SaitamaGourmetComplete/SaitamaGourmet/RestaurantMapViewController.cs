using Google.Maps; using Foundation; using System; using System.Collections.Generic; using CoreGraphics; using CoreLocation; using UIKit;   namespace SaitamaGourmet { 	public partial class RestaurantMapViewController : UIViewController 	{ 		MapView mapView; 		UISegmentedControl mapTypes; 		public List<Restaurants> restData { get; set; } 		public Restaurants targetRestData { get; set; }  		public void SetDetailItem(Restaurants newTargetRestaurant) 		{ 			if (newTargetRestaurant != null) 			{ 				targetRestData = newTargetRestaurant; 			}  		}  		public RestaurantMapViewController(IntPtr handle) : base(handle)
		{ 		}  		public override void LoadView()
		{ 			base.LoadView(); 		}  		public override void ViewDidLoad() 		{ 			base.ViewDidLoad();  			restData = ((RestaurantTabViewController)(this.ParentViewController)).restData;  			var camera = CameraPosition.FromCamera(latitude: restData[0].latitude, 												   longitude: restData[0].longitude, 												   zoom: 15); 			mapView = MapView.FromCamera(CGRect.Empty, camera); 			mapView.MyLocationEnabled = true; 			mapView.MapType = MapViewType.Normal;
			View = mapView;  			int typesWidth = 260, typesHeight = 30, distanceFromBottom = 100; 			mapTypes = new UISegmentedControl(new CGRect(55, View.Bounds.Height - distanceFromBottom, typesWidth, typesHeight)); 			mapTypes.InsertSegment("Road", 0, false); 			mapTypes.InsertSegment("Satellite", 1, false); 			mapTypes.InsertSegment("Hybrid", 2, false); 			mapTypes.SelectedSegment = 0; // Road is the defaul 			mapTypes.AutoresizingMask = UIViewAutoresizing.FlexibleTopMargin; 			mapTypes.ValueChanged += (s, e) => 			{ 				switch (mapTypes.SelectedSegment) 				{ 					case 0: 						mapView.MapType = MapViewType.Normal; 						break; 					case 1: 						mapView.MapType = MapViewType.Satellite; 						break; 					case 2: 						mapView.MapType = MapViewType.Hybrid; 						break; 				} 			};  			View.AddSubview(mapTypes);   			mapView.InfoTapped += new EventHandler<GMSMarkerEventEventArgs>(mapViewTapedInfo); 			for (int i = 0; i < restData.Count; i++) 			{ 				MakeMarker(i, restData[i].name, restData[i].latitude, restData[i].longitude, restData[i].address, mapView); 			} 		}  		public Marker MakeMarker(int num, string title, double latitude, double longitude, string address, MapView mv) 		{ 			Marker marker = new Marker(); 			marker.Title = title; 			marker.Snippet = address; 			marker.Position = new CLLocationCoordinate2D(latitude, longitude); 			marker.Map = mv;  			NSNumber pos; 			pos = num; 			marker.UserData = pos;  			return marker; 		}   		void mapViewTapedInfo(object sender, GMSMarkerEventEventArgs e) 		{ 			int index = 0; 			Marker marker = mapView.SelectedMarker;  			if (marker.UserData is NSNumber) 			{ 				var x = (NSNumber)marker.UserData; 				index = x.UInt16Value; 			}  			targetRestData = restData[index];  			this.PerformSegue("restDetailFromMap", this); 		}  		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender) 		{ 			if (segue.Identifier == "restDetailFromMap") 			{ 				((RestDetailTabViewController)segue.DestinationViewController).SetDetailItem(targetRestData); 			} 		}  		public override void DidReceiveMemoryWarning()
		{ 			base.DidReceiveMemoryWarning();
			// Release any cached data, images, etc that aren't in use.
		} 	} } 