// This file has been autogenerated from parsing an Objective-C header file added in Xcode.using System;
using System;
using System.Collections.Generic;
using System.Linq;
using Xamarin.Themes;

#if __UNIFIED__
using UIKit;
using Foundation;
#else
using MonoTouch.UIKit;
using MonoTouch.Foundation;

using System.Drawing;
using CGRect = global::System.Drawing.RectangleF;
using CGPoint = global::System.Drawing.PointF;
using CGSize = global::System.Drawing.SizeF;
using nfloat = global::System.Single;
using nint = global::System.Int32;
using nuint = global::System.UInt32;
#endif

namespace ThemeSample {
	public partial class DetailThemeControllerIPad : UIViewController {

		Recipe recipe;

		public DetailThemeControllerIPad (IntPtr handle) : base (handle)
		{
		}

		public void SetRecipe (Recipe value)
		{
			if (value == null)
				throw new ArgumentNullException ("value");

			if (value == recipe)
				return;

			ViewsContainer.Hidden = false;
			DishImage.Image = value.Image;

			ingredientsController.Ingredients = value.Ingredients;
			IngredientsTableView.ReloadData ();

			stepsController.Steps = value.PreparationSteps;
			StepsTableView.ReloadData ();

			recipe = value;	
		}

		IngredientsTableVIewController ingredientsController;
		StepsTableVIewController stepsController;

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			var toolbarBg = FoodyTheme.SharedTheme.NavigationBackgroundForSplitView ();
			Toolbar.SetBackgroundImage (toolbarBg, UIToolbarPosition.Any, UIBarMetrics.Default);

			var bottomToolbarBg = FoodyTheme.SharedTheme.ToolbarBackgroundForSplitView ();
			BottomToolbar.SetBackgroundImage (bottomToolbarBg, UIToolbarPosition.Bottom, UIBarMetrics.Default);


			ingredientsController = new IngredientsTableVIewController (UITableViewStyle.Plain);
			IngredientsTableView.WeakDataSource = ingredientsController;
			IngredientsTableView.WeakDelegate = ingredientsController;

			IngredientsTableView.SeparatorColor = UIColor.Clear;
			IngredientsTableView.SeparatorStyle = UITableViewCellSeparatorStyle.None;


			stepsController = new StepsTableVIewController (UITableViewStyle.Plain);
			StepsTableView.WeakDataSource = stepsController;
			StepsTableView.WeakDelegate = stepsController;

			FoodyTheme.Apply (View);
			ViewsContainer.Hidden = true;
			
		}
	
		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			//make the tool bar taller
			var tbFrame = Toolbar.Frame;
			tbFrame.Height = 64;
			Toolbar.Frame = tbFrame;
		}
		[Export ("splitViewController:willHideViewController:withBarButtonItem:forPopoverController:")]
		void WillHideViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc)
		{
			barButtonItem.Title = "Master";
			var bItems = NavigationItem.RightBarButtonItems;
			var items = bItems != null ? bItems.ToList () : new List<UIBarButtonItem> ();

			items.Insert (0, barButtonItem);
			Toolbar.SetItems (items.ToArray (), true);
		}

		[Export ("splitViewController:willShowViewController:invalidatingBarButtonItem:")]
		public void WillShowViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem button)
		{
			var tmp = Toolbar.Items;
			var items = tmp != null ? tmp.ToList () : new List<UIBarButtonItem> ();
			items.Remove (button);
			Toolbar.SetItems (items.ToArray (), true);
		}

		sealed class IngredientsTableVIewController : UITableViewController {
			public IngredientsTableVIewController (UITableViewStyle style) : base(style)
			{
				Ingredients = new string[0];
			}

			public override nint NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			public override nint RowsInSection (UITableView tableview, nint section)
			{
				return Ingredients.Length;
			}

			public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				return 33;
			}

			const string CellIdentifier = "IngredientsCell";

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = tableView.DequeueReusableCell (CellIdentifier) as IngredientsCell;
				cell.Init (Ingredients[indexPath.Row]);

				return cell;
			}

			public string [] Ingredients { get; set; }
		}

		sealed class StepsTableVIewController : UITableViewController {
			public StepsTableVIewController (UITableViewStyle style) : base(style)
			{
				Steps = new string[0];
			}

			public override nint NumberOfSections (UITableView tableView)
			{
				return 1;
			}

			public override nint RowsInSection (UITableView tableview, nint section)
			{
				return Steps.Length;
			}

			public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
			{
				return 88;
			}

			const string CellIdentifier = "StepsCell";

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
			{
				var cell = tableView.DequeueReusableCell (CellIdentifier) as StepsCell;
				cell.Init (Steps [indexPath.Row], indexPath.Row + 1);

				return cell;
			}

			public string [] Steps { get; set; }
		}
	}
}
